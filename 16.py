# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import logging
logging.basicConfig()
paramiko_logger = logging.getLogger("paramiko.transport")
paramiko_logger.disabled = True

import paramiko
import sys, time
from PyQt5.QtWidgets import QMainWindow, QApplication, QMessageBox
from PyQt5 import QtCore,  QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import  QPixmap
import subprocess
from random import choice
from PIL import Image
import barcode



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(824, 661)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 170, 54, 12))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(110, 160, 111, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 110, 54, 12))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_2.setGeometry(QtCore.QRect(110, 100, 111, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(40, 270, 421, 331))
        self.textBrowser.setAutoFillBackground(True)
        self.textBrowser.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(480, 270, 311, 331))
        self.textBrowser_2.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(50, 230, 121, 16))
        self.label_4.setObjectName("label_4")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_3.setGeometry(QtCore.QRect(190, 220, 31, 31))
        self.textBrowser_3.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(480, 240, 81, 20))
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(110, 50, 69, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(50, 50, 54, 20))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(460, 60, 54, 12))
        self.label_6.setObjectName("label_6")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setEnabled(True)
        self.lineEdit_3.setGeometry(QtCore.QRect(520, 50, 111, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(460, 100, 311, 101))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 824, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "AP  mac"))
        self.label_2.setText(_translate("MainWindow", "CPE mac"))
        self.label_4.setText(_translate("MainWindow", "Windwos ping机器状态"))
        self.label_3.setText(_translate("MainWindow", "已录入mac"))
        self.comboBox.setItemText(0, _translate("MainWindow", "CPE"))
        self.comboBox.setItemText(1, _translate("MainWindow", "AP"))
        self.label_5.setText(_translate("MainWindow", "模式"))
        self.label_6.setText(_translate("MainWindow", "随机密码"))



class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.comboBox.activated[str].connect(self.visible)#实时获取下拉框的值，作出控件位置更改隐藏
        self.lineEdit_2.setFocus()



    def Change(self, msg):#在界面上显示和打印
        global ap_mac, reboot, num
        if 'print' in msg:
            self.textBrowser.append(msg.split('/')[1])
        if 'success'in msg:
            self.next()  # 页面清空，为下一台mac录入做准备
        if 'record' in msg:#记录写进的mac和随机密码
            if mark_mode == 'CPE':
                self.textBrowser_2.append(
                    str(num) + '、 ' + mark_mode + '  ' + cpe_mac + '  ' + ap_mac + '  ' + self.lineEdit_3.text() + '\n')
            else:
                self.textBrowser_2.append(
                    str(num) + '、 ' + mark_mode + '  ' + ap_mac + '  ' + cpe_mac + '  ' + self.lineEdit_3.text() + '\n')
        if 'green' in msg:
            self.textBrowser_3.setStyleSheet('background-color: rgb(0, 255, 0);')#ping机器状态按钮变绿色
        if 'white'   in msg:
            self.textBrowser_3.setStyleSheet('background-color: rgb(255, 255, 255);')#ping机器状态按钮变白色

    def visible(self):#控件位置更改
        if self.comboBox.currentText() == 'AP':  # ap模式下，ap的mac先录入
            self.label_7.setVisible(False)
            self.label.setGeometry(QtCore.QRect(50, 110, 54, 12))#ap  mac录入框
            self.lineEdit.setGeometry(QtCore.QRect(110, 100, 111, 31))

            self.label_2.setGeometry(QtCore.QRect(50, 170, 54, 12))#cpe  mac录入框
            self.lineEdit_2.setGeometry(QtCore.QRect(110, 160, 111, 31))

            self.lineEdit.setFocus()
        else:
            self.label_7.setVisible(True)
            self.label_2.setGeometry(QtCore.QRect(50, 110, 54, 12))  # cpe  mac录入框
            self.lineEdit_2.setGeometry(QtCore.QRect(110, 100, 111, 31))

            self.label.setGeometry(QtCore.QRect(50, 170, 54, 12))  # ap  mac录入框
            self.lineEdit.setGeometry(QtCore.QRect(110, 160, 111, 31))

            self.lineEdit_2.setFocus()


    def keyPressEvent(self, QKeyEvent):  # 键盘回车键被按下时调用
        global mark_mode
        mark_mode = self.comboBox.currentText()#模式选择后取其字符串
        if mark_mode  == 'CPE':
            if (QKeyEvent.key() == Qt.Key_Enter or QKeyEvent.key() == Qt.Key_Return) and len(self.lineEdit_2.text()) == 12 :
                self.lineEdit.setFocus()
                if (QKeyEvent.key() == Qt.Key_Enter or QKeyEvent.key() == Qt.Key_Return) and len(self.lineEdit.text()) == 12:
                    self.textBrowser.append('开始。。。。。。正用windows ping 板子，成功后用ssh修改mac')
                    self.mark_mac()  # 保存录入的mac，生成随机码，启动多线程

        else:
            if (QKeyEvent.key() == Qt.Key_Enter or QKeyEvent.key() == Qt.Key_Return) and len(self.lineEdit.text()) == 12:
                self.lineEdit_2.setFocus()
                if (QKeyEvent.key() == Qt.Key_Enter or QKeyEvent.key() == Qt.Key_Return) and len(self.lineEdit_2.text()) == 12:
                    self.lineEdit_3.setFocus()#随机密码框
                    if (QKeyEvent.key() == Qt.Key_Enter or QKeyEvent.key() == Qt.Key_Return) and len(self.lineEdit_3.text()) == 12:
                        self.textBrowser.append('开始。。。。。。正用windows ping 板子，成功后用ssh修改mac')
                        self.mark_mac()  # 保存录入的mac，随机码，启动多线程

        if (QKeyEvent.key() == Qt.Key_Enter or QKeyEvent.key() == Qt.Key_Return) and self.lineEdit.text() == '' and self.lineEdit_2.text() == '':
            self.message_window_popup('请录入mac')

    def mark_mac(self):#录入linEdit已扫入的mac和生成随机码
        global ap_mac, cpe_mac, value, randomcode, randomcode_set, mark_mode
        self.thread = New_Thread()  # 回车一次就启动多线程一次
        self.thread._signal.connect(self.Change)
        self.thread.start()

        if mark_mode =='CPE':
            cpe_mac = self.lineEdit_2.text()  # cpe的mac
            ap_mac = self.lineEdit.text()  # ap的mac

            self.lineEdit_3.setText('')  # 防止手多手动输入
            randomcode = "".join([choice("0123456789ABCDEF") for i in range(12)])
            self.lineEdit_3.setText(randomcode)  # 填充随机码
            self.code128(randomcode)


        else:
            ap_mac = self.lineEdit.text()  # ap的mac
            cpe_mac = self.lineEdit_2.text()  # cpe的mac
            randomcode_set = self.lineEdit_3.text()#扫码录入的随机密码

        value = 1  # 传给多线程，标志mac已录入






    def message_window_popup(self,str):#录入信息不完整情况下弹出提示框
        reply = QMessageBox.question(self, 'Message',
                                     str +'       ', QMessageBox.Yes)

    def code128(self,code):#生成条形码
        barcode.generate('Code128', code,
                                 writer=barcode.writer.ImageWriter(),
                                 output='ap_mac1',
                                 writer_options={"background": "white", "text_distance": 1.0, 'module_width': 0.2, 'module_height':10.0},
                                 text=code)
        self.ResizeImage('ap_mac1.png', 'ap_mac.png', 250, 120)#调整图片大小
        pix = QPixmap('ap_mac.png')  # 在界面上显示随机密码的条形码
        self.label_7.setPixmap(pix)

    def ResizeImage(self, filein, fileout, width, height):#修改条形码图片大小
        r"""
            filein:  输入图片
            fileout: 输出图片
            width: 输出图片宽度
            height:输出图片高度.）
         """
        img = Image.open(filein)
        out = img.resize((width, height), Image.ANTIALIAS)  # resize image with high-quality
        out.save(fileout, 'png')

    def next(self):
        global reboot,num
        reply = QMessageBox.question(self, 'Message',
                                     '已录入，是否重启       ', QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.Yes:
            num += 1
            reboot = 1
        if reply == QMessageBox.No:
            reboot = 2
            self.textBrowser_3.setStyleSheet('background-color: rgb(255, 255, 255);')#没选择重启确认，ping机器状态按钮变回白色


    def closeEvent(self, event):#检测是否点击了页面右上角的叉叉
        reply = QMessageBox.question(self, 'Message',
                                     '确定要退出吗?', QMessageBox.Yes,
                                     QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()




class New_Thread(QThread):#线程
    _signal = QtCore.pyqtSignal(str)#
    def __init__(self, parent=None):
        super(New_Thread, self).__init__(parent)

    def windows_ping_ip_test(self, ip):#windows ping 机器测试
        while 1:
            proc = subprocess.Popen(
                'ping ' + ip,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                stdin=subprocess.PIPE  # 重定向输入值
            )
            proc.stdin.close()  # 既然没有命令行窗口，那就关闭输入
            proc.wait()
            result = proc.stdout.read().decode('gbk')   # 读取cmd执行的输出结果（是byte类型，需要decode）
            self._signal.emit('print/' + result)
            proc.stdout.close()

            if result.count('TTL=64') >= 1:
                self._signal.emit('print/能ping通ip地址')
                self._signal.emit('green/ping通状态可以变成绿色')
                return 0
            else:
                self._signal.emit('print/休息10秒再ping')
                self._signal.emit('white/ping不通')
                time.sleep(10)

    def ping(self,ip,username,passwd):#对改mac的文件传输两个mac参数
        global mark_mode, randomcode_set, reboot
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, 22, username, passwd)
        self._signal.emit('print/通过ssh传输修改mac命令')
        if mark_mode == 'CPE':
            stdin, stdout, stderr = ssh.exec_command("/sbin/chmac.sh " + cpe_mac + ' ' + ap_mac + ' ' + randomcode + ' ' + mark_mode )#哪个模式，哪个mac写第一
        if mark_mode == 'AP':
            stdin, stdout, stderr = ssh.exec_command("/sbin/chmac.sh " + ap_mac + ' ' + cpe_mac + ' ' + randomcode_set + ' ' + mark_mode )
        str1 = ''
        for line in stdout:
            str1 = line.strip('\n')
            # self._signal.emit('print/' + str1 + '\n')
        if str1.find("mac had Changed") == 0:
            self._signal.emit('success/')
        while 1:
            if reboot == 1:#收到reboot == 1 变化
                ssh.exec_command('reboot')
                self._signal.emit('print/修改mac成功，板子重启生效中。。。。。。')
                self._signal.emit('record/')
                reboot  = 0
                break
            if reboot == 2: #退出ping循环，因为没有得到reboot == 1
                reboot = 0
                print('退出ping循环，因为没有得到reboot == 1 ')
                break


        ssh.close()
        self._signal.emit('print/')


    def run(self):#线程主函数
        global  value
        ip = '192.168.1.123'
        username = 'root'
        passwd = 'password'
        judge = 1
        while judge:
            if value == 1:
                value = judge = 0
                if self.windows_ping_ip_test(ip) == 0:
                        self.ping(ip, username, passwd)


if __name__ == '__main__':
    #设置全局变量
    mark_mode = ap_mac = cpe_mac = randomcode = randomcode_set ='ppp'
    value = reboot = num = 0

    #界面运行
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
